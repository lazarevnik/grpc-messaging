// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protodata/protofile.proto

package notify

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Info struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Num                  int32    `protobuf:"varint,2,opt,name=Num,proto3" json:"Num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Info) Reset()         { *m = Info{} }
func (m *Info) String() string { return proto.CompactTextString(m) }
func (*Info) ProtoMessage()    {}
func (*Info) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c94b1cc746634b8, []int{0}
}

func (m *Info) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Info.Unmarshal(m, b)
}
func (m *Info) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Info.Marshal(b, m, deterministic)
}
func (m *Info) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Info.Merge(m, src)
}
func (m *Info) XXX_Size() int {
	return xxx_messageInfo_Info.Size(m)
}
func (m *Info) XXX_DiscardUnknown() {
	xxx_messageInfo_Info.DiscardUnknown(m)
}

var xxx_messageInfo_Info proto.InternalMessageInfo

func (m *Info) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Info) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

type InfoRequest struct {
	Mes                  *Info    `protobuf:"bytes,1,opt,name=mes,proto3" json:"mes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InfoRequest) Reset()         { *m = InfoRequest{} }
func (m *InfoRequest) String() string { return proto.CompactTextString(m) }
func (*InfoRequest) ProtoMessage()    {}
func (*InfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c94b1cc746634b8, []int{1}
}

func (m *InfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InfoRequest.Unmarshal(m, b)
}
func (m *InfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InfoRequest.Marshal(b, m, deterministic)
}
func (m *InfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoRequest.Merge(m, src)
}
func (m *InfoRequest) XXX_Size() int {
	return xxx_messageInfo_InfoRequest.Size(m)
}
func (m *InfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InfoRequest proto.InternalMessageInfo

func (m *InfoRequest) GetMes() *Info {
	if m != nil {
		return m.Mes
	}
	return nil
}

type InfoReply struct {
	Mes                  *Info    `protobuf:"bytes,1,opt,name=mes,proto3" json:"mes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InfoReply) Reset()         { *m = InfoReply{} }
func (m *InfoReply) String() string { return proto.CompactTextString(m) }
func (*InfoReply) ProtoMessage()    {}
func (*InfoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c94b1cc746634b8, []int{2}
}

func (m *InfoReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InfoReply.Unmarshal(m, b)
}
func (m *InfoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InfoReply.Marshal(b, m, deterministic)
}
func (m *InfoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoReply.Merge(m, src)
}
func (m *InfoReply) XXX_Size() int {
	return xxx_messageInfo_InfoReply.Size(m)
}
func (m *InfoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoReply.DiscardUnknown(m)
}

var xxx_messageInfo_InfoReply proto.InternalMessageInfo

func (m *InfoReply) GetMes() *Info {
	if m != nil {
		return m.Mes
	}
	return nil
}

func init() {
	proto.RegisterType((*Info)(nil), "notify.Info")
	proto.RegisterType((*InfoRequest)(nil), "notify.InfoRequest")
	proto.RegisterType((*InfoReply)(nil), "notify.InfoReply")
}

func init() { proto.RegisterFile("protodata/protofile.proto", fileDescriptor_6c94b1cc746634b8) }

var fileDescriptor_6c94b1cc746634b8 = []byte{
	// 183 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2c, 0x28, 0xca, 0x2f,
	0xc9, 0x4f, 0x49, 0x2c, 0x49, 0xd4, 0x07, 0xb3, 0xd2, 0x32, 0x73, 0x52, 0xf5, 0xc0, 0x2c, 0x21,
	0xb6, 0xbc, 0xfc, 0x92, 0xcc, 0xb4, 0x4a, 0x25, 0x1d, 0x2e, 0x16, 0xcf, 0xbc, 0xb4, 0x7c, 0x21,
	0x21, 0x2e, 0x16, 0xbf, 0xc4, 0xdc, 0x54, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x30, 0x5b,
	0x48, 0x80, 0x8b, 0xd9, 0xaf, 0x34, 0x57, 0x82, 0x49, 0x81, 0x51, 0x83, 0x35, 0x08, 0xc4, 0x54,
	0xd2, 0xe5, 0xe2, 0x06, 0xa9, 0x0e, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x92, 0xe3, 0x62,
	0xce, 0x4d, 0x2d, 0x06, 0xeb, 0xe1, 0x36, 0xe2, 0xd1, 0x83, 0x18, 0xa9, 0x07, 0x56, 0x01, 0x92,
	0x50, 0xd2, 0xe6, 0xe2, 0x84, 0x28, 0x2f, 0xc8, 0xa9, 0x24, 0xa4, 0xd8, 0xc8, 0x99, 0x8b, 0xc3,
	0x0f, 0x24, 0x96, 0x99, 0x5a, 0x24, 0x64, 0xce, 0xc5, 0xe9, 0x9b, 0x5a, 0x5c, 0x9c, 0x98, 0x9e,
	0x99, 0x97, 0x2e, 0x24, 0x8c, 0xa2, 0x16, 0x62, 0xb5, 0x94, 0x20, 0xaa, 0x60, 0x41, 0x4e, 0xa5,
	0x12, 0x83, 0x01, 0x63, 0x12, 0x1b, 0xd8, 0x77, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x08,
	0x95, 0xdc, 0xfa, 0xfa, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NotifierClient is the client API for Notifier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NotifierClient interface {
	Messaging(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (Notifier_MessagingClient, error)
}

type notifierClient struct {
	cc *grpc.ClientConn
}

func NewNotifierClient(cc *grpc.ClientConn) NotifierClient {
	return &notifierClient{cc}
}

func (c *notifierClient) Messaging(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (Notifier_MessagingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Notifier_serviceDesc.Streams[0], "/notify.Notifier/Messaging", opts...)
	if err != nil {
		return nil, err
	}
	x := &notifierMessagingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Notifier_MessagingClient interface {
	Recv() (*InfoReply, error)
	grpc.ClientStream
}

type notifierMessagingClient struct {
	grpc.ClientStream
}

func (x *notifierMessagingClient) Recv() (*InfoReply, error) {
	m := new(InfoReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NotifierServer is the server API for Notifier service.
type NotifierServer interface {
	Messaging(*InfoRequest, Notifier_MessagingServer) error
}

// UnimplementedNotifierServer can be embedded to have forward compatible implementations.
type UnimplementedNotifierServer struct {
}

func (*UnimplementedNotifierServer) Messaging(req *InfoRequest, srv Notifier_MessagingServer) error {
	return status.Errorf(codes.Unimplemented, "method Messaging not implemented")
}

func RegisterNotifierServer(s *grpc.Server, srv NotifierServer) {
	s.RegisterService(&_Notifier_serviceDesc, srv)
}

func _Notifier_Messaging_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InfoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotifierServer).Messaging(m, &notifierMessagingServer{stream})
}

type Notifier_MessagingServer interface {
	Send(*InfoReply) error
	grpc.ServerStream
}

type notifierMessagingServer struct {
	grpc.ServerStream
}

func (x *notifierMessagingServer) Send(m *InfoReply) error {
	return x.ServerStream.SendMsg(m)
}

var _Notifier_serviceDesc = grpc.ServiceDesc{
	ServiceName: "notify.Notifier",
	HandlerType: (*NotifierServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Messaging",
			Handler:       _Notifier_Messaging_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protodata/protofile.proto",
}
